--https://www.roblox.com/games/5043740115/V2-SOON-Slamming-Simulator


local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/preztel/AzureLibrary/master/uilib.lua", true))()

local AutoTab = Library:CreateTab("Slamming-Simulator GUI","things", true)
local eggs = Library:CreateTab("Auto Buy Eggs X1","things", true)
local Bosses = Library:CreateTab("Auto Kill Bosses","things", true)
local MISC = Library:CreateTab("MISC","things", true)
local credits = Library:CreateTab("Credits","things", true)


credits:CreateButton("Our Discords", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("masterkyllian#1723", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("https://discord.gg/Sr8exX4", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("bsoleil31FR#7202", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("https://discord.gg/m9Nn3qd", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("Bebo Mods#1110", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)


AutoTab:CreateButton("Destroy Gui :D", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:Destroy()
end)


MISC:CreateToggle("NO CLIP Press(E)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.NO = true 
  noclip = false
game:GetService('RunService').Stepped:connect(function()
if noclip then
game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
end
end)
plr = game.Players.LocalPlayer
mouse = plr:GetMouse()
mouse.KeyDown:connect(function(key)

if key == "e" then
noclip = not noclip
game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
end
end)
print('Created by FileExplorer')
print('Credits to Peyton for the ChangeState part of this script')

         
else
_G.NO = false
end
end)


AutoTab:CreateToggle("Auto Collect", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.c3 = true 
        while wait(0) and _G.c3 do
            for _, v in pairs(game:GetService("Workspace").Collectibles.Client.Home:GetChildren()) do
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame =  v.Main.CFrame
end

        end
    else
        _G.c3 = false
           
         end
end)
AutoTab:CreateToggle("Auto Spin", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.c4 = true 
        while wait(0) and _G.c4 do


local args = {
    [1] = "RedeemSpin",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateSpins:FireServer(unpack(args))

        end
    else
        _G.c4 = false
           
         end
end)
MISC:CreateToggle("Speed Hack 100", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.Speed = true 
        while wait() and _G.Speed do
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 100
        end
    else
        _G.Speed = false
           game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 20
         end
end)

AutoTab:CreateToggle("Auto Click Fast", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.b = true 
        while wait(0) and _G.b do

local args = {
    [1] = "ActivateEffect",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateTools:FireServer(unpack(args))
local args = {
    [1] = "ActivateEffect",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateTools:FireServer(unpack(args))
local args = {
    [1] = "ActivateEffect",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateTools:FireServer(unpack(args))
local args = {
    [1] = "ActivateEffect",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateTools:FireServer(unpack(args))
local args = {
    [1] = "ActivateEffect",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateTools:FireServer(unpack(args))
local args = {
    [1] = "ActivateEffect",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateTools:FireServer(unpack(args))
local args = {
    [1] = "ActivateEffect",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateTools:FireServer(unpack(args))
local args = {
    [1] = "ActivateEffect",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateTools:FireServer(unpack(args))
        end
    else
        _G.b= false
    end
end)


AutoTab:CreateToggle("Auto Sell X1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.c = true 
        while wait(0) and _G.c do

local args = {
    [1] = "SellStrength",
    [2] = "Spawn",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateDNA:FireServer(unpack(args))
        end
    else
        _G.c= false
    end
end)
AutoTab:CreateToggle("Auto Sell X2", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.d = true 
        while wait(0) and _G.d do

local args = {
    [1] = "SellStrength",
    [2] = "Desert",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateDNA:FireServer(unpack(args))
        end
    else
        _G.d= false
    end
end)
AutoTab:CreateToggle("Auto Sell X3", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.e = true 
        while wait(0) and _G.e do
local args = {
    [1] = "SellStrength",
    [2] = "Magma",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateDNA:FireServer(unpack(args))
        end
    else
        _G.e= false
    end
end)
AutoTab:CreateToggle("Auto Sell X4", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.e = true 
        while wait(0) and _G.e do
local args = {
    [1] = "SellStrength",
    [2] = "Autumn",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateDNA:FireServer(unpack(args))
        end
    else
        _G.e= false
    end
end)
AutoTab:CreateToggle("Auto Buy Tools", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.f = true 
        while wait(0) and _G.f do

local args = {
    [1] = "BuyAllTools",
    [2] = "Home",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateTools:FireServer(unpack(args))
local args = {
    [1] = "BuyAllTools",
    [2] = "Magma",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateTools:FireServer(unpack(args))
local args = {
    [1] = "BuyAllTools",
    [2] = "Desert",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateTools:FireServer(unpack(args))
local args = {
    [1] = "BuyAllTools",
    [2] = "Autumn",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateTools:FireServer(unpack(args))
        end
    else
        _G.f= false
    end
end)
AutoTab:CreateToggle("Auto Buy Dnas", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.f = true 
        while wait(0) and _G.f do

local args = {
    [1] = "BuyAllDNA",
    [2] = "Home",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateTools:FireServer(unpack(args))
local args = {
    [1] = "BuyAllDNA",
    [2] = "Magma",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateTools:FireServer(unpack(args))
local args = {
    [1] = "BuyAllDNA",
    [2] = "Desert",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateTools:FireServer(unpack(args))
local args = {
    [1] = "BuyAllDNA",
    [2] = "Autumn",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateTools:FireServer(unpack(args))
        end
    else
        _G.f= false
    end
end)
AutoTab:CreateToggle("Auto Buy Bosses Hits", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.g2 = true 
        while wait(0) and _G.g2 do
local args = {
    [1] = "BuyAllBossHits",
    [2] = "Home",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateBossHits:FireServer(unpack(args))
local args = {
    [1] = "BuyAllBossHits",
    [2] = "Mamma",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateBossHits:FireServer(unpack(args))
local args = {
    [1] = "BuyAllBossHits",
    [2] = "Desert",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateBossHits:FireServer(unpack(args))
local args = {
    [1] = "BuyAllBossHits",
    [2] = "Autumn",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdateBossHits:FireServer(unpack(args))
        end
    else
        _G.g2= false
    end
end)

eggs:CreateToggle("Auto Buy Regular Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.j = true 
        while wait(0) and _G.j do

local args = {
    [1] = "PurchaseEgg",
    [2] = "Regular",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdatePets:FireServer(unpack(args))
        end
    else
        _G.j= false
    end
end)
eggs:CreateToggle("Auto Buy Spotted Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.k = true 
        while wait(0) and _G.k do

local args = {
    [1] = "PurchaseEgg",
    [2] = "Spotted",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdatePets:FireServer(unpack(args))
        end
    else
        _G.k= false
    end
end)
eggs:CreateToggle("Auto Buy Spikey Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.l = true 
        while wait(0) and _G.l do

local args = {
    [1] = "PurchaseEgg",
    [2] = "Spikey",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdatePets:FireServer(unpack(args))
        end
    else
        _G.l= false
    end
end)
eggs:CreateToggle("Auto Buy Cactus Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.m = true 
        while wait(0) and _G.m do

local args = {
    [1] = "PurchaseEgg",
    [2] = "Cactus",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdatePets:FireServer(unpack(args))
        end
    else
        _G.m= false
    end
end)
eggs:CreateToggle("Auto Buy Rocky Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.n = true 
        while wait(0) and _G.n do

local args = {
    [1] = "PurchaseEgg",
    [2] = "Rocky",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdatePets:FireServer(unpack(args))
        end
    else
        _G.n= false
    end
end)
eggs:CreateToggle("Auto Buy Magma Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.o = true 
        while wait(0) and _G.o do

local args = {
    [1] = "PurchaseEgg",
    [2] = "Magma",
}

game:GetService("ReplicatedStorage").Shared.Modules.Utilities.NetworkUtility.Events.UpdatePets:FireServer(unpack(args))
        end
    else
        _G.o= false
    end
end)
Bosses:CreateToggle("Auto Kill Boss Spawn", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.p = true 
        while wait(0) and _G.p do
local me = game.Players.LocalPlayer.Character
local pbosd = game:GetService("Workspace").Worlds.Home.Boss["5b3c1b4d-5f98-4d60-a6c5-a8794883de1b"].Torso

me.HumanoidRootPart.CFrame = CFrame.new(pbosd.Position.X-0, pbosd.Position.Y+0, pbosd.Position.Z+1)
        end
    else
        _G.p= false
    end
end)
teleports:CreateButton("Spawn", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(211.461121, 176.775879, -153.747971)
end)

teleports:CreateButton("Desert Zone", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-1745.599, -134.491943, -306.100006)
end)

teleports:CreateButton("Magma Zone", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(538.317017, 243.129364, -1611.11804)
end)

--| Anti KICK |
local mt = getrawmetatable(game)
local old = mt.__namecall
local protect = newcclosure or protect_function

if not protect then
protect = function(f) return f end
end

setreadonly(mt, false)
mt.__namecall = protect(function(self, ...)
local method = getnamecallmethod()
if method == "Kick" then
wait(9e9)
return
end
return old(self, ...)
end)
hookfunction(game:GetService("Players").LocalPlayer.Kick,protect(function() wait(9e9)
 end))

--| Anti AFK |
   local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:connect(function()
   vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
   wait(1)
   vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)

--| Anti Ban |
setfflag("DFStringCrashPadUploadToBacktraceToBacktraceBaseUrl", "")
setfflag("DFIntCrashUploadToBacktracePercentage", "0")
setfflag("DFStringCrashUploadToBacktraceBlackholeToken", "")
setfflag("DFStringCrashUploadToBacktraceWindowsPlayerToken", "")

--| Anti AFK | By Altix#3395
    local Virtual = game:service'VirtualUser'
    game:service'Players'.LocalPlayer.Idled:connect(function()
        Virtual:CaptureController()
        Virtual:ClickButton2(Vector2.new())
        wait(2)
    end)

--| Anti Chat Logs |
local CloneFunction = clonefunction
local CheckCaller = CloneFunction(checkcaller)
local HookFunction = CloneFunction(hookfunction)
local LocalPlayer = game.Players.PlayerAdded:wait()

local PostMessage = require(LocalPlayer:WaitForChild("PlayerScripts", 1/0):WaitForChild("ChatScript", 1/0):WaitForChild("ChatMain", 1/0)).MessagePosted
getgenv().MessageEvent = Instance.new("BindableEvent")

local OldFunctionHook
local PostMessageHook = function(self, msg)
   if not CheckCaller() and self == PostMessage then
       MessageEvent:Fire(msg)
       return
   end
   return OldFunctionHook(self, msg)
end
OldFunctionHook = HookFunction(PostMessage.fire, PostMessageHook)
