--https://www.roblox.com/games/5305282088/POISON-EGG-GEM-CLICKER








local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/preztel/AzureLibrary/master/uilib.lua", true))()

local AutoTab = Library:CreateTab("Gem Clicker GUI","things", true)
local eggs = Library:CreateTab("Auto Buy Eggs x3","things", true)
local Rebirths = Library:CreateTab("Auto Rebirths","things", true)
local Sacrifices = Library:CreateTab("Auto Sacrifices","things", true)
local Relinquish = Library:CreateTab("Auto Relinquish","things", true)
local teleports = Library:CreateTab("Teleports","things", true)
local MISC = Library:CreateTab("MISC","things", true)
local credits = Library:CreateTab("Credits","things", true)


credits:CreateButton("Our Discords", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("masterkyllian#1723", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("https://discord.gg/Sr8exX4", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("bsoleil31FR[inchala ptn]#9001", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("https://discord.gg/PdUTrVG", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)


credits:CreateButton("Bebo Mods#1110", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

MISC:CreateToggle("NO CLIP Press(E)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.NO = true 
  noclip = false
game:GetService('RunService').Stepped:connect(function()
if noclip then
game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
end
end)
plr = game.Players.LocalPlayer
mouse = plr:GetMouse()
mouse.KeyDown:connect(function(key)

if key == "e" then
noclip = not noclip
game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
end
end)
print('Created by FileExplorer')
print('Credits to Peyton for the ChangeState part of this script')

         
else
_G.NO = false
end
end)

MISC:CreateToggle("Inf Jump", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.INF = true 
        while wait() and _G.INF do
  InfiniteJumpEnabled = true
game:GetService("UserInputService").JumpRequest:connect(function()
	if InfiniteJumpEnabled then
		game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
	end
end)
         end
else
_G.INF = false
end
end)

MISC:CreateToggle("Speed Hack 100", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.Speed = true 
        while wait() and _G.Speed do
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 100
        end
    else
        _G.Speed = false
           game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 20
         end
end)

AutoTab:CreateToggle("Auto Click", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.b = true 
        while wait(0) and _G.b do
 

   game:GetService("ReplicatedStorage").Click:FireServer()

   game:GetService("ReplicatedStorage").Click:FireServer()

   game:GetService("ReplicatedStorage").Click:FireServer()

   game:GetService("ReplicatedStorage").Click:FireServer()

   game:GetService("ReplicatedStorage").Click:FireServer()

   game:GetService("ReplicatedStorage").Click:FireServer()

   game:GetService("ReplicatedStorage").Click:FireServer()

   game:GetService("ReplicatedStorage").Click:FireServer()

   game:GetService("ReplicatedStorage").Click:FireServer()

   game:GetService("ReplicatedStorage").Click:FireServer()

   game:GetService("ReplicatedStorage").Click:FireServer()

   game:GetService("ReplicatedStorage").Click:FireServer()

   game:GetService("ReplicatedStorage").Click:FireServer()

   game:GetService("ReplicatedStorage").Click:FireServer()

   game:GetService("ReplicatedStorage").Click:FireServer()

   game:GetService("ReplicatedStorage").Click:FireServer()
   
   game:GetService("ReplicatedStorage").Click:FireServer()

   game:GetService("ReplicatedStorage").Click:FireServer()

   game:GetService("ReplicatedStorage").Click:FireServer()

   game:GetService("ReplicatedStorage").Click:FireServer()

   game:GetService("ReplicatedStorage").Click:FireServer()

   game:GetService("ReplicatedStorage").Click:FireServer()

   game:GetService("ReplicatedStorage").Click:FireServer()

   game:GetService("ReplicatedStorage").Click:FireServer()

   game:GetService("ReplicatedStorage").Click:FireServer()

    end
    else
        _G.b = false
    end
end)

AutoTab:CreateToggle("Buy Click Faster", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.cl = true 
        while wait(0) and _G.cl do
   

game:GetService("ReplicatedStorage").Upgrades["Upgrade2"]:FireServer()
        end
    else
        _G.cl = false
    end
end)

AutoTab:CreateToggle("Buy Gem Multiplier x1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Gem1 = true 
        while wait(0) and _G.Gem1 do
   
game:GetService("ReplicatedStorage").Upgrades["Upgrade1"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1"]:FireServer()


game:GetService("ReplicatedStorage").Upgrades["Upgrade1"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1"]:FireServer()


game:GetService("ReplicatedStorage").Upgrades["Upgrade1"]:FireServer()
game:GetService("ReplicatedStorage").Upgrades["Upgrade1"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1"]:FireServer()

        end
    else
        _G.Gem1 = false
    end
end)

AutoTab:CreateToggle("Buy Gem Multiplier x100", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Gem2 = true 
        while wait(0) and _G.Gem2 do
   


game:GetService("ReplicatedStorage").Upgrades["Upgrade1100"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1100"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1100"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1100"]:FireServer()


game:GetService("ReplicatedStorage").Upgrades["Upgrade1100"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1100"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1100"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1100"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1100"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1100"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1100"]:FireServer()


        end
    else
        _G.Gem2 = false
    end
end)

AutoTab:CreateToggle("Buy Gem Multiplier x1m", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Gem3 = true 
        while wait(0) and _G.Gem3 do

game:GetService("ReplicatedStorage").Upgrades["Upgrade11M"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade11M"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade11M"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade11M"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade11M"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade11M"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade11M"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade11M"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade11M"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade11M"]:FireServer()

        end
    else
        _G.Gem3 = false
    end
end)

AutoTab:CreateToggle("Buy Gem Multiplier x100m", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Gem4 = true 
        while wait(0) and _G.Gem4 do




game.RunService.RenderStepped:Connect(function()
 for i=1,1 do
      game:GetService("ReplicatedStorage").Upgrades["Upgrade1100M"]:FireServer()
 end
end)
        end
    else
        _G.Gem4 = false
    end
end)

AutoTab:CreateToggle("Buy Gem Multiplier x1T", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Gem5 = true 
        while wait(0) and _G.Gem5 do



game:GetService("ReplicatedStorage").Upgrades["Upgrade1T"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1T"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1T"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1T"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1T"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1T"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1T"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1T"]:FireServer()

        end
    else
        _G.Gem5 = false
    end
end)

AutoTab:CreateToggle("Buy Gem Multiplier x1Qa", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Gem6 = true 
        while wait(0) and _G.Gem6 do



game:GetService("ReplicatedStorage").Upgrades["Upgrade1Qa"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1Qa"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1Qa"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1Qa"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1Qa"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1Qa"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1Qa"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1Qa"]:FireServer()

        end
    else
        _G.Gem6 = false
    end
end)

AutoTab:CreateToggle("Buy Gem Multiplier x1Qn", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Gem7 = true 
        while wait(0) and _G.Gem7 do



game:GetService("ReplicatedStorage").Upgrades["Upgrade1Qn"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1Qn"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1Qn"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1Qn"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1Qn"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1Qn"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1Qn"]:FireServer()

game:GetService("ReplicatedStorage").Upgrades["Upgrade1Qn"]:FireServer()

        end
    else
        _G.Gem7 = false
    end
end)

AutoTab:CreateToggle("Buy Xp Multiplier x1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.xp = true 
        while wait(0) and _G.xp do
   
  game:GetService("ReplicatedStorage").Upgrades["Upgrade4"]:FireServer()


        end
    else
        _G.xp = false
    end
end)

AutoTab:CreateToggle("Buy Xp Multiplier x10k", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.xD = true 
        while wait(0) and _G.xD do
   

  game:GetService("ReplicatedStorage").Upgrades["Upgrade410000"]:FireServer()

        end
    else
        _G.xD = false
    end
end)

AutoTab:CreateToggle("Buy Xp Multiplier x1M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.xDD = true 
        while wait(0) and _G.xDD do
   

 game:GetService("ReplicatedStorage").Upgrades["Upgrade41000000"]:FireServer()

        end
    else
        _G.xDD = false
    end
end)

AutoTab:CreateToggle("Buy Increase Walkspeed", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.In = true 
        while wait(0) and _G.In do
   
game:GetService("ReplicatedStorage").Upgrades["Upgrade3"]:FireServer()
        end
    else
        _G.In = false
    end
end)

AutoTab:CreateToggle("Buy Relinquish Upgrades", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.In = true 
        while wait(0) and _G.In do
   
game:GetService("ReplicatedStorage").Upgrades["Relinquish1"]:FireServer()
        end
    else
        _G.In = false
    end
end)

AutoTab:CreateToggle("Buy Relinquish Upgrades 1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.In = true 
        while wait(0) and _G.In do
   
game:GetService("ReplicatedStorage").Upgrades["Relinquish2"]:FireServer()
        end
    else
        _G.In = false
    end
end)

AutoTab:CreateToggle("Buy Relinquish Upgrades 2", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.In = true 
        while wait(0) and _G.In do
   
game:GetService("ReplicatedStorage").Upgrades["Relinquish3"]:FireServer()
        end
    else
        _G.In = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.c = true 
        while wait(0) and _G.c do
   
game:GetService("ReplicatedStorage").Rebirth:FireServer()
        end
    else
        _G.c = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x5", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.d = true 
        while wait(0) and _G.d do
   
game:GetService("ReplicatedStorage")["Rebirth5"]:FireServer()
        end
    else
        _G.d = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x25", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.e = true 
        while wait(0) and _G.e do
   
game:GetService("ReplicatedStorage")["Rebirth25"]:FireServer()
        end
    else
        _G.e = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x100", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.f = true 
        while wait(0) and _G.f do
   
game:GetService("ReplicatedStorage")["Rebirth200"]:FireServer()
        end
    else
        _G.f = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x500", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.g = true 
        while wait(0) and _G.g do
   
game:GetService("ReplicatedStorage")["Rebirth500"]:FireServer()
        end
    else
        _G.g = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x1K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.h = true 
        while wait(0) and _G.h do
   
game:GetService("ReplicatedStorage")["Rebirth1000"]:FireServer()
        end
    else
        _G.h = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x10K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.i = true 
        while wait(0) and _G.i do
   
game:GetService("ReplicatedStorage")["Rebirth10000"]:FireServer()
        end
    else
        _G.i = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x100K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.j = true 
        while wait(0) and _G.j do
   
game:GetService("ReplicatedStorage")["Rebirth100000"]:FireServer()
        end
    else
        _G.j = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x1M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.k = true 
        while wait(0) and _G.k do
   
game:GetService("ReplicatedStorage")["Rebirth1000000"]:FireServer()
        end
    else
        _G.k = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x10M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.l = true 
        while wait(0) and _G.l do
   
game:GetService("ReplicatedStorage")["Rebirth10M"]:FireServer()
        end
    else
        _G.l = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x100M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.m = true 
        while wait(0) and _G.m do
   
game:GetService("ReplicatedStorage")["Rebirth100M"]:FireServer()
        end
    else
        _G.m = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x1B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.n = true 
        while wait(0) and _G.n do
   
game:GetService("ReplicatedStorage")["Rebirth1B"]:FireServer()
        end
    else
        _G.n = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x10B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.o = true 
        while wait(0) and _G.o do
   
game:GetService("ReplicatedStorage")["Rebirth10B"]:FireServer()
        end
    else
        _G.o = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x100B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.p = true 
        while wait(0) and _G.p do
   
game:GetService("ReplicatedStorage")["Rebirth100B"]:FireServer()
        end
    else
        _G.p = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x1T", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.q = true 
        while wait(0) and _G.q do
   
game:GetService("ReplicatedStorage")["Rebirth1T"]:FireServer()
        end
    else
        _G.q = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x10T", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.r = true 
        while wait(0) and _G.r do
   
game:GetService("ReplicatedStorage")["Rebirth10T"]:FireServer()
        end
    else
        _G.r = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x1Qa", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.r1 = true 
        while wait(0) and _G.r1 do
   
game:GetService("ReplicatedStorage")["Rebirth1Qa"]:FireServer()
        end
    else
        _G.r1 = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x100Qa", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.r2 = true 
        while wait(0) and _G.r2 do
   
game:GetService("ReplicatedStorage")["Rebirth100Qa"]:FireServer()
        end
    else
        _G.r2 = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x100Qn", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.r3 = true 
        while wait(0) and _G.r3 do
  
game:GetService("ReplicatedStorage")["Rebirth1Qn"]:FireServer()
        end
    else
        _G.r3 = false
    end
end)

eggs:CreateToggle("Auto Buy Common Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.e1 = true 
        while wait(0) and _G.e1 do
   
local args = {
    [1] = game:GetService("Players")["LocalPlayer"],
    [2] = "Common",
    [3] = true,
}

game:GetService("ReplicatedStorage").KeyBind:InvokeServer(unpack(args))
        end
    else
        _G.e1 = false
    end
end)

eggs:CreateToggle("Auto Buy Rare Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.e2 = true 
        while wait(0) and _G.e2 do
   
local args = {
    [1] = game:GetService("Players")["LocalPlayer"],
    [2] = "Rare",
    [3] = true,
}

game:GetService("ReplicatedStorage").KeyBind:InvokeServer(unpack(args))
        end
    else
        _G.e2 = false
    end
end)

eggs:CreateToggle("Auto Buy Epic Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.e3 = true 
        while wait(0) and _G.e3 do
   
local args = {
    [1] = game:GetService("Players")["LocalPlayer"],
    [2] = "Epic",
    [3] = true,
}

game:GetService("ReplicatedStorage").KeyBind:InvokeServer(unpack(args))
        end
    else
        _G.e3 = false
    end
end)

eggs:CreateToggle("Auto Buy Ocean Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.e4 = true 
        while wait(0) and _G.e4 do
   
local args = {
    [1] = game:GetService("Players")["LocalPlayer"],
    [2] = "Rebirth10",
    [3] = true,
}

game:GetService("ReplicatedStorage").KeyBind:InvokeServer(unpack(args))
        end
    else
        _G.e4 = false
    end
end)

eggs:CreateToggle("Auto Buy Ultimate 5B Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.e5 = true 
        while wait(0) and _G.e5 do
   
local args = {
    [1] = game:GetService("Players")["LocalPlayer"],
    [2] = "Legendary",
    [3] = true,
}

game:GetService("ReplicatedStorage").KeyBind:InvokeServer(unpack(args))
        end
    else
        _G.e5 = false
    end
end)

eggs:CreateToggle("Auto Buy Ultimate 1T Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.e6 = true 
        while wait(0) and _G.e6 do
   
local args = {
    [1] = game:GetService("Players")["LocalPlayer"],
    [2] = "Ultimate",
    [3] = true,
}

game:GetService("ReplicatedStorage").KeyBind:InvokeServer(unpack(args))
        end
    else
        _G.e6 = false
    end
end)

eggs:CreateToggle("Auto Buy Poison Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.e7 = true 
        while wait(0) and _G.e7 do
   
local args = {
    [1] = game:GetService("Players")["LocalPlayer"],
    [2] = "Future",
    [3] = true,
}

game:GetService("ReplicatedStorage").KeyBind:InvokeServer(unpack(args))
        end
    else
        _G.e7 = false
    end
end)

eggs:CreateToggle("Auto Buy Robotic Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.e8 = true 
        while wait(0) and _G.e8 do
   
local args = {
    [1] = game:GetService("Players")["LocalPlayer"],
    [2] = "Robotic",
    [3] = true,
}

game:GetService("ReplicatedStorage").KeyBind:InvokeServer(unpack(args))
        end
    else
        _G.e8 = false
    end
end)

eggs:CreateToggle("Auto Buy Shiny Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.e11 = true 
        while wait(0) and _G.e11 do
   
local args = {
    [1] = game:GetService("Players")["LocalPlayer"],
    [2] = "Shiny",
    [3] = true,
}

game:GetService("ReplicatedStorage").KeyBind:InvokeServer(unpack(args))
  end
  else
        _G.e11 = false
    end
end)

eggs:CreateToggle("Auto Buy toxic Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.e10 = true 
        while wait(0) and _G.e10 do
local args = {
    [1] = game:GetService("Players")["LocalPlayer"],
    [2] = "Toxic",
    [3] = true,
}

game:GetService("ReplicatedStorage").KeyBind:InvokeServer(unpack(args))
  end
  else
        _G.e10 = false
    end
end)

eggs:CreateToggle("Auto Buy Cost 1sp Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.e11 = true 
        while wait(0) and _G.e11 do
local args = {
    [1] = game:GetService("Players")["LocalPlayer"],
    [2] = "Atlantis",
    [3] = true,
}

game:GetService("ReplicatedStorage").KeyBind:InvokeServer(unpack(args))
  end
  else
        _G.e11 = false
    end
end)

eggs:CreateToggle("Auto Buy 100k Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.e9 = true 
        while wait(0) and _G.e9 do
local args = {
    [1] = game:GetService("Players")["LocalPlayer"],
    [2] = "100k",
    [3] = true,
}

game:GetService("ReplicatedStorage").KeyBind:InvokeServer(unpack(args))
  end
  else
        _G.e9 = false
    end
end)

Sacrifices:CreateToggle("Auto Buy Sacrifices x1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.S1 = true 
        while wait(0) and _G.S1 do
   
game:GetService("ReplicatedStorage").RemoteEvents.Sacrifice:FireServer()
        end
    else
        _G.S1 = false
    end
end)

Sacrifices:CreateToggle("Auto Buy Sacrifices x5", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.S2 = true 
        while wait(0) and _G.S2 do
   
game:GetService("ReplicatedStorage").RemoteEvents["Sacrifice5"]:FireServer()
        end
    else
        _G.S2 = false
    end
end)

Sacrifices:CreateToggle("Auto Buy Sacrifices x25", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.S3 = true 
        while wait(0) and _G.S3 do
   
game:GetService("ReplicatedStorage").RemoteEvents["Sacrifice25"]:FireServer()
        end
    else
        _G.S3 = false
    end
end)

Sacrifices:CreateToggle("Auto Buy Sacrifices x100", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.S4 = true 
        while wait(0) and _G.S4 do
   
game:GetService("ReplicatedStorage").RemoteEvents["Sacrifice100"]:FireServer()
        end
    else
        _G.S4 = false
    end
end)

Sacrifices:CreateToggle("Auto Buy Sacrifices x500", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.S5 = true 
        while wait(0) and _G.S5 do
   
game:GetService("ReplicatedStorage").RemoteEvents["Sacrifice500"]:FireServer()
        end
    else
        _G.S5 = false
    end
end)

Sacrifices:CreateToggle("Auto Buy Sacrifices x1K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.S6 = true 
        while wait(0) and _G.S6 do
   
game:GetService("ReplicatedStorage").RemoteEvents["Sacrifice1k"]:FireServer()
        end
    else
        _G.S6 = false
    end
end)

Sacrifices:CreateToggle("Auto Buy Sacrifices x10k", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.S7 = true 
        while wait(0) and _G.S7 do
   
game:GetService("ReplicatedStorage").RemoteEvents["Sacrifice10k"]:FireServer()
        end
    else
        _G.S7 = false
    end
end)

Sacrifices:CreateToggle("Auto Buy Sacrifices x100k", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.S8 = true 
        while wait(0) and _G.S8 do
   
game:GetService("ReplicatedStorage").RemoteEvents["Sacrifice100k"]:FireServer()
        end
    else
        _G.S8 = false
    end
end)

Sacrifices:CreateToggle("Auto Buy Sacrifices x1M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.S9 = true 
        while wait(0) and _G.S9 do
   
game:GetService("ReplicatedStorage").RemoteEvents["Sacrifice1M"]:FireServer()
        end
    else
        _G.S9 = false
    end
end)

Sacrifices:CreateToggle("Auto Buy Sacrifices x10M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.S10 = true 
        while wait(0) and _G.S10 do
   
game:GetService("ReplicatedStorage").RemoteEvents["Sacrifice10M"]:FireServer()
        end
    else
        _G.S10 = false
    end
end)

Sacrifices:CreateToggle("Auto Buy Sacrifices x1B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.S11 = true 
        while wait(0) and _G.S11 do
   
game:GetService("ReplicatedStorage").RemoteEvents["Sacrifice1B"]:FireServer()
        end
    else
        _G.S11 = false
    end
end)

Sacrifices:CreateToggle("Auto Buy Sacrifices x10B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.S12 = true 
        while wait(0) and _G.S12 do
   
game:GetService("ReplicatedStorage").RemoteEvents["Sacrifice10B"]:FireServer()
        end
    else
        _G.S12 = false
    end
end)

Sacrifices:CreateToggle("Auto Buy Sacrifices x100B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.S13 = true 
        while wait(0) and _G.S13 do
   
game:GetService("ReplicatedStorage").RemoteEvents["Sacrifice100B"]:FireServer()
        end
    else
        _G.S13 = false
    end
end)

Sacrifices:CreateToggle("Auto Buy Sacrifices x1T", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.S14 = true 
        while wait(0) and _G.S14 do
   
game:GetService("ReplicatedStorage").RemoteEvents["Sacrifice1T"]:FireServer()
        end
    else
        _G.S14 = false
    end
end)

Relinquish:CreateToggle("Auto Buy Relinquish x1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.S11 = true 
        while wait(0) and _G.S11 do
   
game:GetService("ReplicatedStorage").RemoteEvents.Relinquish:FireServer()
        end
    else
        _G.S11 = false
    end
end)

Relinquish:CreateToggle("Auto Buy Relinquish x5", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.S11 = true 
        while wait(0) and _G.S11 do
   
game:GetService("ReplicatedStorage").RemoteEvents["Relinquish5"]:FireServer()
        end
    else
        _G.S11 = false
    end
end)
Relinquish:CreateToggle("Auto Buy Relinquish x25", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.S13 = true 
        while wait(0) and _G.S13 do
   
game:GetService("ReplicatedStorage").RemoteEvents["Relinquish25"]:FireServer()
        end
    else
        _G.S13 = false
    end
end)
Relinquish:CreateToggle("Auto Buy Relinquish x100", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.S12 = true 
        while wait(0) and _G.S12 do
   
game:GetService("ReplicatedStorage").RemoteEvents["Relinquish100"]:FireServer()
        end
    else
        _G.S12 = false
    end
end)

teleports:CreateButton("Spawn", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-951.15332, -375.698547, 626.717957)
end)

teleports:CreateButton("World Boost x2", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(246.133224, -376.992462, 395.130157)
end)

teleports:CreateButton("World Boost x3", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-1372.15002, -376.992462, -902.714233)
end)

teleports:CreateButton("World Boost x4", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-494.182312, -376.992462, -1009.03894)
end)

teleports:CreateButton("World Boost x5", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-2015.66675, -376.992554, -955.407959)
end)

teleports:CreateButton("World Boost x6", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-2049.70288, -376.992462, -1944.70618)
end)

teleports:CreateButton("World Boost x7", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-1395.96582, -376.992554, -1936.14221)
end)

teleports:CreateButton("World Boost x8", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-834.579224, -361.419617, -1976.45862)
end)

teleports:CreateButton("World Boost x20", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-2459.81592, -376.466248, 150.067444)
end)

--| Anti AFK | By Altix#3395
    local Virtual = game:service'VirtualUser'
    game:service'Players'.LocalPlayer.Idled:connect(function()
        Virtual:CaptureController()
        Virtual:ClickButton2(Vector2.new())
        wait(2)
    end)  
