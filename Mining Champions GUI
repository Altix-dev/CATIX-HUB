--https://www.roblox.com/games/5516928515/RELEASE-Mining-Champions#!/game-instances

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/preztel/AzureLibrary/master/uilib.lua", true))()

local AutoTab = Library:CreateTab("Mining-Champions GUI","things", true)
local teleports = Library:CreateTab("Teleports","things", true)
local FORVIP = Library:CreateTab("For VIP","things", true)
local eggs = Library:CreateTab("Auto Buy Eggs X3","things", true)
local eggs2 = Library:CreateTab("Auto Buy Eggs X1","things", true)
local MISC = Library:CreateTab("MISC","things", true)
local credits = Library:CreateTab("Credits","things", true)


credits:CreateButton("Our Discords", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("masterkyllian#1723", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("https://discord.gg/Sr8exX4", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("bsoleil31FR#7202", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("https://discord.gg/m9Nn3qd", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("Bebo Mods#1110", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)


AutoTab:CreateButton("Destroy Gui :D", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:Destroy()
end)

MISC:CreateButton("🎬NO CLIP Press(E)🎬", function() --the (arg) is if the checkbox is toggled or not
    _G.NO2 = true 
  noclip = false
game:GetService('RunService').Stepped:connect(function()
if noclip then
game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
end
end)
plr = game.Players.LocalPlayer
mouse = plr:GetMouse()
mouse.KeyDown:connect(function(key)

if key == "e" then
noclip = not noclip
game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
end
end)
print('Created by FileExplorer')
print('Credits to Peyton for the ChangeState part of this script')
end)

MISC:CreateButton("🤸‍♀️Inf Jump🤸‍♀️", function() --the (arg) is if the checkbox is toggled or not
game:GetService("UserInputService").JumpRequest:connect(function()
    game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
end)
end)
MISC:CreateButton("🕹️Ctrl + Click = TP🕹️", function() --the (arg) is if the checkbox is toggled or not
local Plr = game:GetService("Players").LocalPlayer
local Mouse = Plr:GetMouse()

Mouse.Button1Down:connect(function()
if not game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl) then return end
if not Mouse.Target then return end
Plr.Character:MoveTo(Mouse.Hit.p)
end)
end)

MISC:CreateButton("🪰Fly Press (F)🪰", function() --the (arg) is if the checkbox is toggled or not
     repeat wait() 
	until game.Players.LocalPlayer and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:findFirstChild("Head") and game.Players.LocalPlayer.Character:findFirstChild("Humanoid") 
local mouse = game.Players.LocalPlayer:GetMouse() 
repeat wait() until mouse
local plr = game.Players.LocalPlayer 
local torso = plr.Character.Head 
local flying = false
local deb = true 
local ctrl = {f = 0, b = 0, l = 0, r = 0} 
local lastctrl = {f = 0, b = 0, l = 0, r = 0} 
local maxspeed = 400 
local speed = 5000 

function Fly() 
local bg = Instance.new("BodyGyro", torso) 
bg.P = 9e4 
bg.maxTorque = Vector3.new(9e9, 9e9, 9e9) 
bg.cframe = torso.CFrame 
local bv = Instance.new("BodyVelocity", torso) 
bv.velocity = Vector3.new(0,0.1,0) 
bv.maxForce = Vector3.new(9e9, 9e9, 9e9) 
repeat wait() 
plr.Character.Humanoid.PlatformStand = true 
if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then 
speed = speed+.5+(speed/maxspeed) 
if speed > maxspeed then 
speed = maxspeed 
end 
elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then 
speed = speed-1 
if speed < 0 then 
speed = 0 
end 
end 
if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then 
bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed 
lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r} 
elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then 
bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed 
else 
bv.velocity = Vector3.new(0,0.1,0) 
end 
bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*speed/maxspeed),0,0) 
until not flying 
ctrl = {f = 0, b = 0, l = 0, r = 0} 
lastctrl = {f = 0, b = 0, l = 0, r = 0} 
speed = 100
bg:Destroy() 
bv:Destroy() 
plr.Character.Humanoid.PlatformStand = false 
end 
mouse.KeyDown:connect(function(key) 
if key:lower() == "f" then 
if flying then flying = false 
else 
flying = true 
Fly() 
end 
elseif key:lower() == "w" then 
ctrl.f = 1 
elseif key:lower() == "s" then 
ctrl.b = -1 
elseif key:lower() == "a" then 
ctrl.l = -1 
elseif key:lower() == "d" then 
ctrl.r = 1 
end 
end) 
mouse.KeyUp:connect(function(key) 
if key:lower() == "w" then 
ctrl.f = 0 
elseif key:lower() == "s" then 
ctrl.b = 0 
elseif key:lower() == "a" then 
ctrl.l = 0 
elseif key:lower() == "d" then 
ctrl.r = 0 
end 
end)
Fly()

          
end)


FORVIP:CreateToggle("Mine VIP Ore", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.aa = true 
        while wait(0) and _G.aa do

local args = {
    [1] = workspace.Resources.Ores["World_1"]["Center_Ores"].VIP,
}

game:GetService("ReplicatedStorage").Events.Server.RequestSwing:InvokeServer(unpack(args))
        end
    else
        _G.aa= false
    end
end)
AutoTab:CreateToggle("Mine Center Ore Spawn", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.b = true 
        while wait(0) and _G.b do

local args = {
    [1] = workspace.Resources.Ores["World_1"]["Center_Ores"]["Ore_1"],
}

game:GetService("ReplicatedStorage").Events.Server.RequestSwing:InvokeServer(unpack(args))
        end
    else
        _G.b= false
    end
end)
AutoTab:CreateToggle("Mine Center Ore zone 1 ", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.b2 = true 
        while wait(0) and _G.b2 do

local args = {
    [1] = workspace.Resources.Ores["World_1"]["Center_Ores"]["Ore_2"],
}

game:GetService("ReplicatedStorage").Events.Server.RequestSwing:InvokeServer(unpack(args))
        end
    else
        _G.b2= false
    end
end)
AutoTab:CreateToggle("Mine Center Ore zone 2 ", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.b3 = true 
        while wait(0) and _G.b3 do

local args = {
    [1] = workspace.Resources.Ores["World_1"]["Center_Ores"]["Ore_3"],
}

game:GetService("ReplicatedStorage").Events.Server.RequestSwing:InvokeServer(unpack(args))
        end
    else
        _G.b3= false
    end
end)
AutoTab:CreateToggle("Mine Center Ore zone 3 ", function(arg) --the (arg) is if the checkbox is toggled or not 
    if arg then
        _G.b5 = true 
        while wait(0) and _G.b5 do

local args = {
    [1] = workspace.Resources.Ores["World_1"]["Center_Ores"]["Ore_4"],
}

game:GetService("ReplicatedStorage").Events.Server.RequestSwing:InvokeServer(unpack(args))
        end
    else
        _G.b5= false
    end
end)
AutoTab:CreateToggle("Mine Center Ore zone 4 ", function(arg) --the (arg) is if the checkbox is toggled or not 
    if arg then
        _G.b52 = true 
        while wait(0) and _G.b52 do

local args = {
    [1] = workspace.Resources.Ores["World_1"]["Center_Ores"]["Ore_5"],
}

game:GetService("ReplicatedStorage").Events.Server.RequestSwing:InvokeServer(unpack(args))
        end
    else
        _G.b52= false
    end
end)
AutoTab:CreateToggle("Mine Center Ore zone 5 ", function(arg) --the (arg) is if the checkbox is toggled or not 
    if arg then
        _G.b53 = true 
        while wait(0) and _G.b53 do

local args = {
    [1] = workspace.Resources.Ores["World_1"]["Center_Ores"]["Ore_6"],
}

game:GetService("ReplicatedStorage").Events.Server.RequestSwing:InvokeServer(unpack(args))
        end
    else
        _G.b53= false
    end
end)
AutoTab:CreateToggle("Mine Gems Ore Spawn ", function(arg) --the (arg) is if the checkbox is toggled or not 
    if arg then
        _G.b6 = true 
        while wait(0) and _G.b6 do

local args = {
    [1] = workspace.Resources.Ores["World_1"]["Island_1"]["Gem_1"],
}

game:GetService("ReplicatedStorage").Events.Server.RequestSwing:InvokeServer(unpack(args))

        end
    else
        _G.b6= false
    end
end)
AutoTab:CreateToggle("Mine Gems Ore zone 1 ", function(arg) --the (arg) is if the checkbox is toggled or not 
    if arg then
        _G.b7 = true 
        while wait(0) and _G.b7 do


local args = {
    [1] = workspace.Resources.Ores["World_1"]["Island_2"]["Gem_2"],
}

game:GetService("ReplicatedStorage").Events.Server.RequestSwing:InvokeServer(unpack(args))
        end
    else
        _G.b7= false
    end
end)
AutoTab:CreateToggle("Mine Gems Ore zone 2 ", function(arg) --the (arg) is if the checkbox is toggled or not 
    if arg then
        _G.b8 = true 
        while wait(0) and _G.b8 do

local args = {
    [1] = workspace.Resources.Ores["World_1"]["Island_3"]["Gem_3"],
}

game:GetService("ReplicatedStorage").Events.Server.RequestSwing:InvokeServer(unpack(args))
        end
    else
        _G.b8= false
    end
end)
AutoTab:CreateToggle("Mine Gems Ore zone 3 ", function(arg) --the (arg) is if the checkbox is toggled or not 
    if arg then
        _G.b9 = true 
        while wait(0) and _G.b9 do

local args = {
    [1] = workspace.Resources.Ores["World_1"]["Island_4"]["Gem_4"],
}

game:GetService("ReplicatedStorage").Events.Server.RequestSwing:InvokeServer(unpack(args))
        end
    else
        _G.b9= false
    end
end)
AutoTab:CreateToggle("Mine Gems Ore zone 4 ", function(arg) --the (arg) is if the checkbox is toggled or not 
    if arg then
        _G.b92 = true 
        while wait(0) and _G.b92 do

local args = {
    [1] = workspace.Resources.Ores["World_1"]["Island_5"]["Gem_5"],
}

game:GetService("ReplicatedStorage").Events.Server.RequestSwing:InvokeServer(unpack(args))
        end
    else
        _G.b92= false
    end
end)
AutoTab:CreateToggle("Mine Gems Ore zone 5 ", function(arg) --the (arg) is if the checkbox is toggled or not 
    if arg then
        _G.b93 = true 
        while wait(0) and _G.b93 do

local args = {
    [1] = workspace.Resources.Ores["World_1"]["Island_6"]["Gem_6"],
}

game:GetService("ReplicatedStorage").Events.Server.RequestSwing:InvokeServer(unpack(args))
        end
    else
        _G.b93= false
    end
end)
AutoTab:CreateToggle("Auto Sell", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.c = true 
        while wait() and _G.c do
game:GetService("ReplicatedStorage").Events.Server.RequestSell:InvokeServer()
           end
  else
    
        _G.c = false
    end
end)
AutoTab:CreateToggle("Auto Multi Delete All", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.cd = true 
        while wait(0.5) and _G.cd do
game:GetService("ReplicatedStorage").Events.Server.RequestMultiDeleteAll:InvokeServer()
           end
  else
    
        _G.cd = false
    end
end)
AutoTab:CreateToggle("Auto Equip Best Coins", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.d = true 
        while wait() and _G.d do
game:GetService("ReplicatedStorage").Events.Server.BestCoin:InvokeServer()
           end
  else
    
        _G.d = false
    end
end)
AutoTab:CreateToggle("Auto Quests", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.d22 = true 
        while wait() and _G.d2 do


local args = {
    [1] = "Eggs",
    [2] = "2",
}

game:GetService("ReplicatedStorage").Events.Server.Quest:InvokeServer(unpack(args))

local args = {
    [1] = "Eggs",
    [2] = "3",
}

game:GetService("ReplicatedStorage").Events.Server.Quest:InvokeServer(unpack(args))

local args = {
    [1] = "Eggs",
    [2] = "4",
}

game:GetService("ReplicatedStorage").Events.Server.Quest:InvokeServer(unpack(args))

local args = {
    [1] = "Eggs",
    [2] = "5",
}

game:GetService("ReplicatedStorage").Events.Server.Quest:InvokeServer(unpack(args))
local args = {
    [1] = "Eggs",
    [2] = "6",
}

game:GetService("ReplicatedStorage").Events.Server.Quest:InvokeServer(unpack(args))
local args = {
    [1] = "Eggs",
    [2] = "7",
}

game:GetService("ReplicatedStorage").Events.Server.Quest:InvokeServer(unpack(args))
local args = {
    [1] = "Eggs",
    [2] = "8",
}

game:GetService("ReplicatedStorage").Events.Server.Quest:InvokeServer(unpack(args))

local args = {
    [1] = "Eggs",
    [2] = "9",
}

game:GetService("ReplicatedStorage").Events.Server.Quest:InvokeServer(unpack(args))

local args = {
    [1] = "Eggs",
    [2] = "10",
}

game:GetService("ReplicatedStorage").Events.Server.Quest:InvokeServer(unpack(args))
local args = {
    [1] = "Eggs",
    [2] = "11",
}

game:GetService("ReplicatedStorage").Events.Server.Quest:InvokeServer(unpack(args))
local args = {
    [1] = "Eggs",
    [2] = "12",
}

game:GetService("ReplicatedStorage").Events.Server.Quest:InvokeServer(unpack(args))
local args = {
    [1] = "Eggs",
    [2] = "13",
}

game:GetService("ReplicatedStorage").Events.Server.Quest:InvokeServer(unpack(args))
           end
  else
    
        _G.d22 = false
    end
end)
AutoTab:CreateToggle("Auto Equip Best Gems", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.e = true 
        while wait() and _G.e do
game:GetService("ReplicatedStorage").Events.Server.BestGem:InvokeServer()
           end
  else
    
        _G.e = false
    end
end)
AutoTab:CreateToggle("Auto Equip Best Ore", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.f = true 
        while wait() and _G.f do
game:GetService("ReplicatedStorage").Events.Server.BestOre:InvokeServer()
           end
  else
    
        _G.f = false
    end
end)
eggs:CreateToggle("Auto Buy Starter Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.za = true 
        while wait() and _G.za do
local args = {
    [1] = "1",
    [2] = 3,
}

game:GetService("ReplicatedStorage").Events.Server.BuyEgg:InvokeServer(unpack(args))
           end
  else
    
        _G.za = false
    end
end)
eggs:CreateToggle("Auto Buy Gold Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.zb = true 
        while wait() and _G.zb do
local args = {
    [1] = "2",
    [2] = 3,
}

game:GetService("ReplicatedStorage").Events.Server.BuyEgg:InvokeServer(unpack(args))
           end
  else
    
        _G.zb = false
    end
end)
eggs:CreateToggle("Auto Buy Grass Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.zc = true 
        while wait() and _G.zc do
local args = {
    [1] = "3",
    [2] = 3,
}

game:GetService("ReplicatedStorage").Events.Server.BuyEgg:InvokeServer(unpack(args))
           end
  else
    
        _G.zc = false
    end
end)
eggs:CreateToggle("Auto Buy Desert Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.zd = true 
        while wait() and _G.zd do
local args = {
    [1] = "4",
    [2] = 3,
}

game:GetService("ReplicatedStorage").Events.Server.BuyEgg:InvokeServer(unpack(args))
           end
  else
    
        _G.zd = false
    end
end)
eggs:CreateToggle("Auto Buy Jungle Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.ze = true 
        while wait() and _G.ze do
local args = {
    [1] = "5",
    [2] = 3,
}

game:GetService("ReplicatedStorage").Events.Server.BuyEgg:InvokeServer(unpack(args))
           end
  else
    
        _G.ze = false
    end
end)
eggs:CreateToggle("Auto Buy ice Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.zf = true 
        while wait() and _G.zf do
local args = {
    [1] = "6",
    [2] = 3,
}

game:GetService("ReplicatedStorage").Events.Server.BuyEgg:InvokeServer(unpack(args))
           end
  else
    
        _G.zf = false
    end
end)
eggs:CreateToggle("Auto Buy Moon Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.zf77 = true 
        while wait() and _G.zf77 do
local args = {
    [1] = "7",
    [2] = 3,
}

game:GetService("ReplicatedStorage").Events.Server.BuyEgg:InvokeServer(unpack(args))
           end
  else
    
        _G.zf77 = false
    end
end)
eggs:CreateToggle("Auto Buy 1M Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.zf4 = true 
        while wait() and _G.zf4 do
local args = {
    [1] = "1M",
    [2] = 1,
}

game:GetService("ReplicatedStorage").Events.Server.BuyEgg:InvokeServer(unpack(args))
           end
  else
    
        _G.zf4 = false
    end
end)
eggs2:CreateToggle("Auto Buy Starter Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.za2 = true 
        while wait() and _G.za2 do
local args = {
    [1] = "1",
    [2] = 1,
}

game:GetService("ReplicatedStorage").Events.Server.BuyEgg:InvokeServer(unpack(args))
           end
  else
    
        _G.za2 = false
    end
end)
eggs2:CreateToggle("Auto Buy Gold Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.zb2 = true 
        while wait() and _G.zb2 do
local args = {
    [1] = "2",
    [2] = 1,
}

game:GetService("ReplicatedStorage").Events.Server.BuyEgg:InvokeServer(unpack(args))
           end
  else
    
        _G.zb2 = false
    end
end)
eggs2:CreateToggle("Auto Buy Grass Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.zc2 = true 
        while wait() and _G.zc2 do
local args = {
    [1] = "3",
    [2] = 1,
}

game:GetService("ReplicatedStorage").Events.Server.BuyEgg:InvokeServer(unpack(args))
           end
  else
    
        _G.zc2 = false
    end
end)
eggs2:CreateToggle("Auto Buy Desert Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.zd = true 
        while wait() and _G.zd do
local args = {
    [1] = "4",
    [2] = 1,
}

game:GetService("ReplicatedStorage").Events.Server.BuyEgg:InvokeServer(unpack(args))
           end
  else
    
        _G.zd = false
    end
end)
eggs2:CreateToggle("Auto Buy Jungle Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.ze2 = true 
        while wait() and _G.ze2 do
local args = {
    [1] = "5",
    [2] = 1,
}

game:GetService("ReplicatedStorage").Events.Server.BuyEgg:InvokeServer(unpack(args))
           end
  else
    
        _G.ze2 = false
    end
end)
eggs2:CreateToggle("Auto Buy ice Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.zf2 = true 
        while wait() and _G.zf2 do
local args = {
    [1] = "6",
    [2] = 1,
}

game:GetService("ReplicatedStorage").Events.Server.BuyEgg:InvokeServer(unpack(args))
           end
  else
    
        _G.zf2 = false
    end
end)
eggs2:CreateToggle("Auto Buy Moon Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.zf4 = true 
        while wait() and _G.zf4 do
local args = {
    [1] = "7",
    [2] = 1,
}

game:GetService("ReplicatedStorage").Events.Server.BuyEgg:InvokeServer(unpack(args))
           end
  else
    
        _G.zf4 = false
    end
end)
eggs2:CreateToggle("Auto Buy 1M Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.zf3 = true 
        while wait() and _G.zf3 do
local args = {
    [1] = "1M",
    [2] = 1,
}

game:GetService("ReplicatedStorage").Events.Server.BuyEgg:InvokeServer(unpack(args))
           end
  else
    
        _G.zf3 = false
    end
end)
teleports:CreateButton("Spawn", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-693.377869, 28.2390366, 371.22583)
end)
teleports:CreateButton("Sell", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-646.548035, 35.514267, 362.693115)
end)
teleports:CreateButton("Zone 1", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-729.277832, 42.5908661, -351.347076)
end)
teleports:CreateButton("Zone 2", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(82.3862762, 82.8040085, -399.409637)
end)
teleports:CreateButton("Zone 3", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(749.316284, 15.2230415, -347.603119)
end)
teleports:CreateButton("Zone 4", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(1632.89258, -40.6574631, -274.565613)
end)
teleports:CreateButton("Zone 5", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(2407.52832, -110.756927, -213.819214)
end)

--| Anti KICK |
local mt = getrawmetatable(game)
local old = mt.__namecall
local protect = newcclosure or protect_function

if not protect then
protect = function(f) return f end
end

setreadonly(mt, false)
mt.__namecall = protect(function(self, ...)
local method = getnamecallmethod()
if method == "Kick" then
wait(9e9)
return
end
return old(self, ...)
end)
hookfunction(game:GetService("Players").LocalPlayer.Kick,protect(function() wait(9e9)
 end))

--| Anti AFK |
   local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:connect(function()
   vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
   wait(1)
   vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)

--| Anti Ban |
setfflag("DFStringCrashPadUploadToBacktraceToBacktraceBaseUrl", "")
setfflag("DFIntCrashUploadToBacktracePercentage", "0")
setfflag("DFStringCrashUploadToBacktraceBlackholeToken", "")
setfflag("DFStringCrashUploadToBacktraceWindowsPlayerToken", "")

--| Anti AFK | By Altix#3395
    local Virtual = game:service'VirtualUser'
    game:service'Players'.LocalPlayer.Idled:connect(function()
        Virtual:CaptureController()
        Virtual:ClickButton2(Vector2.new())
        wait(2)
    end)

--| Anti Chat Logs |
local CloneFunction = clonefunction
local CheckCaller = CloneFunction(checkcaller)
local HookFunction = CloneFunction(hookfunction)
local LocalPlayer = game.Players.PlayerAdded:wait()

local PostMessage = require(LocalPlayer:WaitForChild("PlayerScripts", 1/0):WaitForChild("ChatScript", 1/0):WaitForChild("ChatMain", 1/0)).MessagePosted
getgenv().MessageEvent = Instance.new("BindableEvent")

local OldFunctionHook
local PostMessageHook = function(self, msg)
   if not CheckCaller() and self == PostMessage then
       MessageEvent:Fire(msg)
       return
   end
   return OldFunctionHook(self, msg)
end
OldFunctionHook = HookFunction(PostMessage.fire, PostMessageHook)
