

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/preztel/AzureLibrary/master/uilib.lua", true))()

local AutoTab = Library:CreateTab("Combo Clickers GUI","things", true)
local teleports = Library:CreateTab("Teleports","things", true)
local eggs = Library:CreateTab("Auto Buy Eggs","things", true)
local eggs2 = Library:CreateTab("Auto Buy Eggs 2","things", true)
local eggs3 = Library:CreateTab("Auto Buy Eggs 3","things", true)
local rebirths = Library:CreateTab("Auto Rebirths","things", true)
local rebirths2 = Library:CreateTab("Auto Rebirths 2","things", true)
local rebirths3 = Library:CreateTab("Auto Rebirths 3","things", true)
local crates = Library:CreateTab("Auto Buy Crates","things", true)
local MISC = Library:CreateTab("MISC","things", true)
local credits = Library:CreateTab("Credits","things", true)


credits:CreateButton("Our Discords", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("masterkyllian#1723", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("https://discord.gg/Sr8exX4", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("bsoleil31FR[inchala ptn]#9001", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("https://discord.gg/PdUTrVG", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("Bebo Mods#9619", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

MISC:CreateToggle("NO CLIP Press(E)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.NO = true 
  noclip = false
game:GetService('RunService').Stepped:connect(function()
if noclip then
game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
end
end)
plr = game.Players.LocalPlayer
mouse = plr:GetMouse()
mouse.KeyDown:connect(function(key)

if key == "e" then
noclip = not noclip
game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
end
end)
print('Created by FileExplorer')
print('Credits to Peyton for the ChangeState part of this script')

         
else
_G.NO = false
end
end)



MISC:CreateToggle("Speed Hack 100", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.Speed = true 
        while wait() and _G.Speed do
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 100
        end
    else
        _G.Speed = false
           game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 20
         end
end)

AutoTab:CreateButton("Attention Dysplay issues", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

AutoTab:CreateToggle("Auto Click", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.o = true 
        while wait(0) and _G.o do
            game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")
        end
    else
        _G.o = false
    end
end)

eggs:CreateToggle("Auto Evolve Pets", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.p = true 
        while wait(0) and _G.p do
            local A_1 = 
{
	["UpdateType"] = "UpgradeAllPets"
}
local Event = game:GetService("ReplicatedStorage").Events.InventoryEvent
Event:FireServer(A_1)

        end
    else
        _G.p = false
    end
end)

rebirths3:CreateToggle("Rebirth X10Se", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.a = true 
        while wait(0) and _G.a do
            local args = {
                [1] = {
                    ["Option"] = 1000000000000000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.a = false
    end
end)

rebirths3:CreateToggle("Rebirth X1Se", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.a = true 
        while wait(0) and _G.a do
            local args = {
                [1] = {
                    ["Option"] = 1000000000000000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.a = false
    end
end)

rebirths3:CreateToggle("Rebirth X100S", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.a = true 
        while wait(0) and _G.a do
            local args = {
                [1] = {
                    ["Option"] = 100000000000000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.a = false
    end
end)

rebirths3:CreateToggle("Rebirth X10S", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.a = true 
        while wait(0) and _G.a do
            local args = {
                [1] = {
                    ["Option"] = 10000000000000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.a = false
    end
end)

rebirths3:CreateToggle("Rebirth X1S", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.a = true 
        while wait(0) and _G.a do
            local args = {
                [1] = {
                    ["Option"] = 1000000000000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.a = false
    end
end)

rebirths3:CreateToggle("Rebirth X100Qu", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.a = true 
        while wait(0) and _G.a do
            local args = {
                [1] = {
                    ["Option"] = 100000000000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.a = false
    end
end)

rebirths3:CreateToggle("Rebirth X10Qu", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.a = true 
        while wait(0) and _G.a do
            local args = {
                [1] = {
                    ["Option"] = 10000000000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.a = false
    end
end)

rebirths3:CreateToggle("Rebirth X1Qu", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.b = true 
        while wait(0) and _G.b do
            local args = {
                [1] = {
                    ["Option"] = 1000000000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.b = false
    end
end)

rebirths2:CreateToggle("Rebirth X100Q", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.c = true 
        while wait(0) and _G.c do
            local args = {
                [1] = {
                    ["Option"] = 100000000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.c = false
    end
end)

rebirths2:CreateToggle("Rebirth X10Q", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.d = true 
        while wait(0) and _G.d do
            local args = {
                [1] = {
                    ["Option"] = 10000000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.d = false
    end
end)

rebirths2:CreateToggle("Rebirth X1Q", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.e = true 
        while wait(0) and _G.e do
            local args = {
                [1] = {
                    ["Option"] = 1000000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.e = false
    end
end)

rebirths2:CreateToggle("Rebirth X100T", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.f = true 
        while wait(0) and _G.f do
            local args = {
                [1] = {
                    ["Option"] = 100000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.f = false
    end
end)

rebirths2:CreateToggle("Rebirth X25T", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.g = true 
        while wait(0) and _G.g do
            local args = {
                [1] = {
                    ["Option"] = 25000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.g = false
    end
end)

rebirths2:CreateToggle("Rebirth X10T", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.h = true 
        while wait(0) and _G.h do
            local args = {
                [1] = {
                    ["Option"] = 10000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.h = false
    end
end)

rebirths2:CreateToggle("Rebirth X5T", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.i = true 
        while wait(0) and _G.i do
            local args = {
                [1] = {
                    ["Option"] = 5000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.i = false
    end
end)

rebirths2:CreateToggle("Rebirth X2,5T", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.j = true 
        while wait(0) and _G.j do
            local args = {
                [1] = {
                    ["Option"] = 2500000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.j = false
    end
end)


rebirths2:CreateToggle("Rebirth X1T", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.k = true 
        while wait(0) and _G.k do
            local args = {
                [1] = {
                    ["Option"] = 1000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.k = false
    end
end)

rebirths2:CreateToggle("Rebirth X500B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.l = true 
        while wait(0) and _G.l do
            local args = {
                [1] = {
                    ["Option"] = 500000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.l = false
    end
end)

rebirths2:CreateToggle("Rebirth X250B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.m = true 
        while wait(0) and _G.m do
            local args = {
                [1] = {
                    ["Option"] = 250000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.m = false
    end
end)

rebirths2:CreateToggle("Rebirth X100B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.n = true 
        while wait(0) and _G.n do
            local args = {
                [1] = {
                    ["Option"] = 100000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.n = false
    end
end)

rebirths2:CreateToggle("Rebirth X50B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.o = true 
        while wait(0) and _G.o do
            local args = {
                [1] = {
                    ["Option"] = 50000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.o = false
    end
end)

rebirths2:CreateToggle("Rebirth X25B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.p = true 
        while wait(0) and _G.p do
            local args = {
                [1] = {
                    ["Option"] = 25000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.p = false
    end
end)

rebirths2:CreateToggle("Rebirth X10B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.q = true 
        while wait(0) and _G.q do
            local args = {
                [1] = {
                    ["Option"] = 10000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.q = false
    end
end)

rebirths2:CreateToggle("Rebirth X2,5B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.r = true 
        while wait(0) and _G.r do
            local args = {
                [1] = {
                    ["Option"] = 2500000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.r = false
    end
end)

rebirths:CreateToggle("Rebirth X1B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.s = true 
        while wait(0) and _G.s do
            local args = {
                [1] = {
                    ["Option"] = 1000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.s = false
    end
end)

rebirths:CreateToggle("Rebirth X500M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.t = true 
        while wait(0) and _G.t do
            local args = {
                [1] = {
                    ["Option"] = 500000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.t = false
    end
end)

rebirths:CreateToggle("Rebirth X100M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.u = true 
        while wait(0) and _G.u do
            local args = {
                [1] = {
                    ["Option"] = 100000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.u = false
    end
end)

rebirths:CreateToggle("Rebirth X50M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.v = true 
        while wait(0) and _G.v do
            local args = {
                [1] = {
                    ["Option"] = 50000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.v = false
    end
end)

rebirths:CreateToggle("Rebirth X15M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.w = true 
        while wait(0) and _G.w do
            local args = {
                [1] = {
                    ["Option"] = 15000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.w = false
    end
end)

rebirths:CreateToggle("Rebirth X10M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.x = true 
        while wait(0) and _G.x do
            local args = {
                [1] = {
                    ["Option"] = 10000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.x = false
    end
end)

rebirths:CreateToggle("Rebirth X5M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.y = true 
        while wait(0) and _G.y do
            local args = {
                [1] = {
                    ["Option"] = 5000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.y = false
    end
end)

rebirths:CreateToggle("Rebirth X2M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.z = true 
        while wait(0) and _G.z do
            local args = {
                [1] = {
                    ["Option"] = 2000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.z = false
    end
end)

rebirths:CreateToggle("Rebirth X1M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.za = true 
        while wait(0) and _G.za do
            local args = {
                [1] = {
                    ["Option"] = 1000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.za = false
    end
end)

rebirths:CreateToggle("Rebirth X500K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zb = true 
        while wait(0) and _G.zb do
            local args = {
                [1] = {
                    ["Option"] = 500000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zb = false
    end
end)

rebirths:CreateToggle("Rebirth X250K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zc = true 
        while wait(0) and _G.zc do
            local args = {
                [1] = {
                    ["Option"] = 250000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zc = false
    end
end)

rebirths:CreateToggle("Rebirth X100K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zd = true 
        while wait(0) and _G.zd do
            local args = {
                [1] = {
                    ["Option"] = 100000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zd = false
    end
end)

rebirths:CreateToggle("Rebirth X50K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.ze = true 
        while wait(0) and _G.ze do
            local args = {
                [1] = {
                    ["Option"] = 50000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.ze = false
    end
end)

rebirths:CreateToggle("Rebirth X25K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zf = true 
        while wait(0) and _G.zf do
            local args = {
                [1] = {
                    ["Option"] = 25000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zf = false
    end
end)

rebirths:CreateToggle("Rebirth X10K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zg = true 
        while wait(0) and _G.zg do
            local args = {
                [1] = {
                    ["Option"] = 10000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zg = false
    end
end)

rebirths:CreateToggle("Rebirth X2,5K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zh = true 
        while wait(0) and _G.zh do
            local args = {
                [1] = {
                    ["Option"] = 2500,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zh = false
    end
end)

rebirths:CreateToggle("Rebirth X1K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zi = true 
        while wait(0) and _G.zi do
            local args = {
                [1] = {
                    ["Option"] = 1000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zi = false
    end
end)

rebirths:CreateToggle("Rebirth X500", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zj = true 
        while wait(0) and _G.zj do
            local args = {
                [1] = {
                    ["Option"] = 500,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zj = false
    end
end)

rebirths:CreateToggle("Rebirth X100", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zk = true 
        while wait(0) and _G.zk do
            local args = {
                [1] = {
                    ["Option"] = 100,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zk = false
    end
end)

rebirths:CreateToggle("Rebirth X50", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zl = true 
        while wait(0) and _G.zl do
            local args = {
                [1] = {
                    ["Option"] = 50,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zl = false
    end
end)

rebirths:CreateToggle("Rebirth X10", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zm = true 
        while wait(0) and _G.zm do
            local args = {
                [1] = {
                    ["Option"] = 10,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zm = false
    end
end)

rebirths:CreateToggle("Rebirth X1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zn = true 
        while wait(0) and _G.zn do
            local args = {
                [1] = {
                    ["Option"] = 1,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zn = false
    end
end)

eggs2:CreateToggle("Auto Buy Abyss Egg (18)3", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.E183 = true 
        while wait(0) and _G.E183 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg18",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.E183 = false
    end
end)

eggs2:CreateToggle("Auto Buy Abyss Egg (18)2", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.E182 = true 
        while wait(0) and _G.E182 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg18",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.E182 = false
    end
end)

eggs2:CreateToggle("Auto Buy Abyss Egg (18)1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.E181 = true 
        while wait(0) and _G.E181 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg18",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.E181 = false
    end
end)

eggs2:CreateToggle("Auto Buy Abyss Egg (18)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.E18 = true 
        while wait(0) and _G.E18 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg18",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.E18 = false
    end
end)

eggs2:CreateToggle("Auto Buy Music Egg (17)3", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.E173 = true 
        while wait(0) and _G.E173 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg17",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.E173 = false
    end
end)

eggs2:CreateToggle("Auto Buy Music Egg (17)2", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.E172 = true 
        while wait(0) and _G.E172 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg17",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.E172 = false
    end
end)

eggs2:CreateToggle("Auto Buy Music Egg (17)1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.E171 = true 
        while wait(0) and _G.E171 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg17",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.E171 = false
    end
end)

eggs2:CreateToggle("Auto Buy Music Egg (17)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.E17 = true 
        while wait(0) and _G.E17 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg17",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.E17 = false
    end
end)

eggs2:CreateToggle("Auto Buy Spirit Egg (16)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.E163 = true 
        while wait(0) and _G.E163 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg16",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.E163 = false
    end
end)

eggs2:CreateToggle("Auto Buy Royal Egg (15)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.E153 = true 
        while wait(0) and _G.E153 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg15",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.E153 = false
    end
end)

eggs2:CreateToggle("Auto Buy Mystic Egg (14)3", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.E14 = true 
        while wait(0) and _G.E14 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg14",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.E14 = false
    end
end)

eggs2:CreateToggle("Auto Buy Mystic Egg (14)2", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.E141 = true 
        while wait(0) and _G.E141 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg14",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.E141 = false
    end
end)

eggs2:CreateToggle("Auto Buy Mystic Egg (14)1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.E142 = true 
        while wait(0) and _G.E142 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg14",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.E142 = false
    end
end)

eggs2:CreateToggle("Auto Buy Mystic Egg (14)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.E143 = true 
        while wait(0) and _G.E143 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg14",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.E143 = false
    end
end)

eggs2:CreateToggle("Auto Buy Frost Egg (13)3", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.D = true 
        while wait(0) and _G.D do
            local args = {
                [1] = {
                    ["EggType"] = "Egg13",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.D = false
    end
end)

eggs2:CreateToggle("Auto Buy Frost Egg (13)2", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.L = true 
        while wait(0) and _G.L do
            local args = {
                [1] = {
                    ["EggType"] = "Egg13",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.L = false
    end
end)

eggs2:CreateToggle("Auto Buy Frost Egg (13)1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.M = true 
        while wait(0) and _G.M do
            local args = {
                [1] = {
                    ["EggType"] = "Egg13",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.M = false
    end
end)

eggs2:CreateToggle("Auto Buy Frost Egg (13)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.N = true 
        while wait(0) and _G.N do
            local args = {
                [1] = {
                    ["EggType"] = "Egg13",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.N = false
    end
end)

eggs2:CreateToggle("Auto Buy Russo Egg (12)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zr = true 
        while wait(0) and _G.zr do
            local args = {
                [1] = {
                    ["EggType"] = "Egg12",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zr = false
    end
end)

eggs2:CreateToggle("Auto Buy Arcade Egg (11)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zv = true 
        while wait(0) and _G.zv do
            local args = {
                [1] = {
                    ["EggType"] = "Egg11",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zv = false
    end
end)

eggs3:CreateToggle("Auto Dragons Egg (10)3", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zz6 = true 
        while wait(0) and _G.zz6 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg10",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zz6 = false
    end
end)

eggs3:CreateToggle("Auto Dragons Egg (10)2", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zz5 = true 
        while wait(0) and _G.zz5 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg10",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zz5 = false
    end
end)

eggs3:CreateToggle("Auto Dragons Egg (10)1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zz4 = true 
        while wait(0) and _G.zz4 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg10",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zz4 = false
    end
end)

eggs3:CreateToggle("Auto Dragons Egg (10)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zz = true 
        while wait(0) and _G.zz do
            local args = {
                [1] = {
                    ["EggType"] = "Egg10",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zz = false
    end
end)

eggs3:CreateToggle("Auto Minion Egg 2 (20)3", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.MINION8 = true 
        while wait(0) and _G.MINION8 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg20",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.MINION8 = false
    end
end)

eggs3:CreateToggle("Auto Minion Egg 2 (20)2", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.MINION7 = true 
        while wait(0) and _G.MINION7 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg00",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.MINION7 = false
    end
end)

eggs3:CreateToggle("Auto Minion Egg 2 (20)1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.MINION6 = true 
        while wait(0) and _G.MINION6 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg20",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.MINION6 = false
    end
end)

eggs3:CreateToggle("Auto Minion Egg 2 (20)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.MINION5 = true 
        while wait(0) and _G.MINION5 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg20",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.MINION5 = false
    end
end)

eggs3:CreateToggle("Auto Minion Egg (19)3", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.MINION4 = true 
        while wait(0) and _G.MINION4 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg19",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.MINION4 = false
    end
end)

eggs3:CreateToggle("Auto Minion Egg (19)2", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.MINION3 = true 
        while wait(0) and _G.MINION3 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg19",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.MINION3 = false
    end
end)

eggs3:CreateToggle("Auto Minion Egg (19)1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.MINION2 = true 
        while wait(0) and _G.MINION2 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg19",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.MINION2 = false
    end
end)

eggs3:CreateToggle("Auto Minion Egg (19)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.MINION1 = true 
        while wait(0) and _G.MINION1 do
            local args = {
                [1] = {
                    ["EggType"] = "Egg19",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.MINION1 = false
    end
end)

eggs:CreateToggle("Auto Buy villian Egg (9)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zza = true 
        while wait(0) and _G.zza do
            local args = {
                [1] = {
                    ["EggType"] = "Egg9",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zza = false
    end
end)

eggs:CreateToggle("Auto Buy Alien Egg (8)3", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zzb = true 
        while wait(0) and _G.zzb do
            local args = {
                [1] = {
                    ["EggType"] = "Egg8",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zzb = false
    end
end)

eggs:CreateToggle("Auto Buy Alien Egg (8)2", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zzc = true 
        while wait(0) and _G.zzc do
            local args = {
                [1] = {
                    ["EggType"] = "Egg8",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zzc = false
    end
end)

eggs:CreateToggle("Auto Buy Alien Egg (8)1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zzd = true 
        while wait(0) and _G.zzd do
            local args = {
                [1] = {
                    ["EggType"] = "Egg8",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zzd = false
    end
end)

eggs:CreateToggle("Auto Buy Alien Egg (8)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zze = true 
        while wait(0) and _G.zze do
            local args = {
                [1] = {
                    ["EggType"] = "Egg8",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zze = false
    end
end)

eggs:CreateToggle("Auto Buy Ocean Egg (7)3", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zzf = true 
        while wait(0) and _G.zzf do
            local args = {
                [1] = {
                    ["EggType"] = "Egg7",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,

              
              },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zzf = false
    end
end)

eggs:CreateToggle("Auto Buy Ocean Egg (7)2", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zzg = true 
        while wait(0) and _G.zzg do
            local args = {
                [1] = {
                    ["EggType"] = "Egg7",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,

              
              },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zzg = false
    end
end)

eggs:CreateToggle("Auto Buy Ocean Egg (7)1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zzh = true 
        while wait(0) and _G.zzh do
            local args = {
                [1] = {
                    ["EggType"] = "Egg7",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,

              
              },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zzh = false
    end
end)

eggs:CreateToggle("Auto Buy Ocean Egg (7)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zzi = true 
        while wait(0) and _G.zzi do
            local args = {
                [1] = {
                    ["EggType"] = "Egg7",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,

              
              },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zzi = false
    end
end)

eggs:CreateToggle("Auto Buy 7M Egg", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zzj = true 
        while wait(0) and _G.zzj do
        local args = {
    [1] = {
        ["EggType"] = "Egg7M",
        ["UpdateType"] = "Open",
        ["Amount"] = 3,
    },
}

game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))          
        end
    else
        _G.zzj = false
    end
end)

eggs:CreateToggle("Auto Buy Ancient Egg (6)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zzo = true 
        while wait(0) and _G.zzo do
            local args = {
                [1] = {
                    ["EggType"] = "Egg6",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zzo = false
    end
end)

eggs:CreateToggle("Auto Buy Carnival Egg (5)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zzp = true 
        while wait(0) and _G.zzp do
            local args = {
                [1] = {
                    ["EggType"] = "Egg5",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zzp = false
    end
end)

eggs:CreateToggle("Auto Buy Emojis Egg (4)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zzq = true 
        while wait(0) and _G.zzq do
            local args = {
                [1] = {
                    ["EggType"] = "Egg4",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zzq = false
    end
end)

eggs:CreateToggle("Auto Buy Tropical Egg (3)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zzr = true 
        while wait(0) and _G.zzr do
            local args = {
                [1] = {
                    ["EggType"] = "Egg3",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zzr = false
    end
end)

eggs:CreateToggle("Auto Buy Spotted Egg (2)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zzs = true 
        while wait(0) and _G.zzs do
            local args = {
                [1] = {
                    ["EggType"] = "Egg2",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zzs = false
    end
end)

eggs:CreateToggle("Auto Buy  Egg (1)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zzt = true 
        while wait(0) and _G.zzt do
            local args = {
                [1] = {
                    ["EggType"] = "Egg1",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.zzt = false
    end
end)

crates:CreateToggle("Auto Buy Blossom Crate (2)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.ODD = true 
        while wait(0) and _G.ODD do
            local args = {
                [1] = {
                    ["CrateType"] = "Crate2",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.CrateFunction:InvokeServer(unpack(args))            
        end
    else
        _G.ODD = false
    end
end)

crates:CreateToggle("Auto Buy Carnival Crate (3)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.ODD4 = true 
        while wait(0) and _G.ODD4 do
            local args = {
                [1] = {
                    ["CrateType"] = "Crate3",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.CrateFunction:InvokeServer(unpack(args))            
        end
    else
        _G.ODD4 = false
    end
end)

crates:CreateToggle("Auto Buy Grasy Crate (1)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.ODD1 = true 
        while wait(0) and _G.ODD1 do
            local args = {
                [1] = {
                    ["CrateType"] = "Crate1",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.CrateFunction:InvokeServer(unpack(args))            
        end
    else
        _G.ODD1 = false
    end
end)

crates:CreateToggle("Auto Buy Hero Crate (4)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.OOD2 = true 
        while wait(0) and _G.OOD2 do
            local args = {
                [1] = {
                    ["CrateType"] = "Crate4",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 3,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.CrateFunction:InvokeServer(unpack(args))            
        end
    else
        _G.OOD2 = false
    end
end)

crates:CreateToggle("Auto Buy Mystic Crate (5)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.OOD2 = true 
        while wait(0) and _G.OOD2 do
 local args = {
    [1] = {
        ["Amount"] = 3,
        ["UpdateType"] = "Open",
        ["CrateType"] = "Crate5",
    },
}

game:GetService("ReplicatedStorage").Functions.CrateFunction:InvokeServer(unpack(args))           
        end
    else
        _G.OOD2 = false
    end
end)


crates:CreateToggle("Auto Buy Abyssal Crate (6)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.OOD3 = true 
        while wait(0) and _G.OOD3 do
 local args = {
    [1] = {
        ["Amount"] = 3,
        ["UpdateType"] = "Open",
        ["CrateType"] = "Crate6",
    },
}

game:GetService("ReplicatedStorage").Functions.CrateFunction:InvokeServer(unpack(args))           
        end
    else
        _G.OOD3 = false
    end
end)

AutoTab:CreateToggle("Auto Buy Potions", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.as = true 
        while wait(0) and _G.as do
            local args = {
            [1] = "Purchase",
            [2] = {
        ["Type"] = "ClickBooster2",
    },
}
game:GetService("ReplicatedStorage").Functions.Potions:InvokeServer(unpack(args))

  
            local args = {
            [1] = "Purchase",
            [2] = {
        ["Type"] = "ClickBooster25",
    },
}
game:GetService("ReplicatedStorage").Functions.Potions:InvokeServer(unpack(args))



            local args = {
            [1] = "Purchase",
            [2] = {
        ["Type"] = "ClickBooster10",
    },
}
game:GetService("ReplicatedStorage").Functions.Potions:InvokeServer(unpack(args))



            local args = {
            [1] = "Purchase",
            [2] = {
        ["Type"] = "ClickBooster5",
    },
}
game:GetService("ReplicatedStorage").Functions.Potions:InvokeServer(unpack(args))



            local args = {
            [1] = "Purchase",
            [2] = {
        ["Type"] = "GemBooster5",
    },
}
game:GetService("ReplicatedStorage").Functions.Potions:InvokeServer(unpack(args))



            local args = {
            [1] = "Purchase",
            [2] = {
        ["Type"] = "GemBooster2",
    },
}
game:GetService("ReplicatedStorage").Functions.Potions:InvokeServer(unpack(args))



  local args = {
    [1] = "Purchase",
    [2] = {
        ["Amount"] = 1,
        ["Type"] = "LuckBooster2",
    },
}

game:GetService("ReplicatedStorage").Functions.Potions:InvokeServer(unpack(args))
end
    else
        _G.as = false
    end
end)

AutoTab:CreateToggle("Auto Buy All Upgrades", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.a = true 
        while wait(0) and _G.a do
      local args = {
    [1] = {
        ["Upgrade"] = "WalkSpeed",
        ["RequestType"] = "UpgradeMax"
    }
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))




            local args = {
    [1] = {
        ["Upgrade"] = "FasterCombo",
        ["RequestType"] = "UpgradeMax",
    },
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))



           local args = {
    [1] = {
        ["Upgrade"] = "PetLuck",
        ["RequestType"] = "UpgradeMax",
    },
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))



            
local args = {
    [1] = {
        ["Upgrade"] = "HatSlot",
        ["RequestType"] = "UpgradeMax",
    },
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))



           
local args = {
    [1] = {
        ["Upgrade"] = "FreeAutoClicker",
        ["RequestType"] = "UpgradeMax",
    },
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))



           local args = {
    [1] = {
        ["Upgrade"] = "GemIncrease",
        ["RequestType"] = "UpgradeMax",
    },
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))


          local args = {
    [1] = {
        ["Upgrade"] = "RebirthOptions",
        ["RequestType"] = "UpgradeMax",
    },
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))



           local args = {
    [1] = {
        ["Upgrade"] = "PetSlot",
        ["RequestType"] = "UpgradeMax",
    },
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))



           local args = {
    [1] = {
        ["Upgrade"] = "Inventory",
        ["RequestType"] = "UpgradeMax",
    },
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))



         local args = {
    [1] = {
        ["Upgrade"] = "OpeningSpeed",
        ["RequestType"] = "UpgradeMax",
    },
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))
 


        while wait(0) and _G.k do
            
local args = {
    [1] = {
        ["Upgrade"] = "MaxCombo",
        ["RequestType"] = "UpgradeMax",
    },
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))



            local args = {
    [1] = {
        ["Upgrade"] = "RocketJump",
        ["RequestType"] = "UpgradeMax",
    },
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))



local args = {
    [1] = {
        ["Upgrade"] = "PetTier",
        ["RequestType"] = "UpgradeMax"
    }
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))

local args = {
    [1] = {
        ["Upgrade"] = "HatTier",
        ["RequestType"] = "UpgradeMax"
    }
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))

local args = {
    [1] = {
        ["Upgrade"] = "PetCloner",
        ["RequestType"] = "UpgradeMax"
    }
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))

local args = {
    [1] = {
        ["Upgrade"] = "ComboTime",
        ["RequestType"] = "UpgradeMax",
    },
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))

        end
end
    else
        _G.m = false
    end
end)

teleports:CreateDropDown("Islands", {"Spawn", "Islands 1", "Islands 2", "Islands 3", "Islands 4", "Islands 5", "Islands 6", "Islands 7" , "Islands 8" , "Islands 10", "Islands 11", "Islands 12", "Islands 13"}, function(arg) --the (arg) is the option you choose 
    if arg == "Spawn" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-27.2958336, 54.7868347, -880.203003)
    elseif arg == "Islands 1" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(121.647934, 457.010315, -821.140198)
    elseif arg == "Islands 2" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(15.2872801, 904.083008, -917.881653)
    elseif arg == "Islands 3" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(80.4999313, 1717.63647, -1058.14905)
    elseif arg == "Islands 4" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(239.828644, 2434.19946, -940.05658)
    elseif arg == "Islands 5" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(280.046295, 3603.84424, -858.549377)  
    elseif arg == "Islands 6" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(401.155701, 4312.67871, -765.344055) 
    elseif arg == "Islands 7" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(581.19635, 5097.88477, -692.195923) 
    elseif arg == "Islands 8" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(581.19635, 5097.88477, -692.195923) 
      elseif arg == "Islands 10" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(639.837158, 7832.3584, -972.805908)
    elseif arg == "Islands 11" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(505.438507, 8859.80859, -916.89563)
    elseif arg == "Islands 12" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(506.177124, 9814.79883, -918.168823)
    elseif arg == "Islands 13" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(430.266144, 10732.1807, -878.734436)
    end
end)

teleports:CreateButton("Island 9", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(530.815979, 5905.21631, -724.711487)
end)

teleports:CreateButton("Island 14", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(405.558899, 11443.7959, -898.731812)
end)

teleports:CreateButton("Island 15", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(372.993469, 12338.2129, -755.207336)
end)
teleports:CreateButton("Island 16", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(399.82663, 13106.3906, -718.65509)
end)

teleports:CreateButton("Island 17", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(396.47406, 13890.3213, -867.959778)
end)

teleports:CreateButton("Island 18", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(429.792755, 14317.666, -865.610596)
end)

teleports:CreateButton("Island 19", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(431.707916, 14813.1299, -862.556519)
end)


teleports:CreateButton("Shop 1", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-39.3278999, 54.5634804, -831.109619)
end)

teleports:CreateButton("Shop 2", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-32.12286, 53.8192062, -936.877014)
end)

teleports:CreateButton("Spin Wheel", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(1.59071529, 53.6350098, -919.411987)
end)

teleports:CreateButton("LeaderBoards", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-56.2045021, 54.7868347, -883.298218)
end)
AutoTab:CreateButton("Destroy Gui :D", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:Destroy()
end)

--| Anti AFK | By Altix#3395
    local Virtual = game:service'VirtualUser'
    game:service'Players'.LocalPlayer.Idled:connect(function()
        Virtual:CaptureController()
        Virtual:ClickButton2(Vector2.new())
        wait(2)
    end)

