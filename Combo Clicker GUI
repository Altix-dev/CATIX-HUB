

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/preztel/AzureLibrary/master/uilib.lua", true))()

local AutoTab = Library:CreateTab("Combo Clickers GUI","things", true)
local potions = Library:CreateTab("Auto Buy Potions","things", true)
local Upgrades = Library:CreateTab("Auto Buy Upgrades","things", true)
local teleports = Library:CreateTab("Teleports","things", true)
local rebirths = Library:CreateTab("Auto Rebirths","things", true)
local rebirths2 = Library:CreateTab("Auto Rebirths 2","things", true)
local eggs = Library:CreateTab("Auto Buy Eggs","things", true)
local eggs2 = Library:CreateTab("Auto Buy Eggs 2","things", true)
local crates = Library:CreateTab("Auto Buy Crates","things", true)
local credits = Library:CreateTab("Credits","things", true)


credits:CreateButton("Our Discords", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("masterkyllian#1723", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("https://discord.gg/Sr8exX4", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("bsoleil31FR[inchala ptn]#9001", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("https://discord.gg/PdUTrVG", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

credits:CreateButton("Big C#5347", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

AutoTab:CreateButton("Attention Dysplay issues", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

Upgrades:CreateToggle("Increase Walk Speed", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Basic = true 
        while wait(0) and _G.Basic do
      local args = {
    [1] = {
        ["Upgrade"] = "WalkSpeed",
        ["RequestType"] = "UpgradeMax"
    }
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))

        end
    else
        _G.Basic = false
    end
end)

Upgrades:CreateToggle("Faster Combo", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Basic = true 
        while wait(0) and _G.Basic do
            local args = {
    [1] = {
        ["Upgrade"] = "FasterCombo",
        ["RequestType"] = "UpgradeMax",
    },
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))
        end
    else
        _G.Basic = false
    end
end)

Upgrades:CreateToggle("Pet Luck", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Basic = true 
        while wait(0) and _G.Basic do
           local args = {
    [1] = {
        ["Upgrade"] = "PetLuck",
        ["RequestType"] = "UpgradeMax",
    },
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))
        end
    else
        _G.Basic = false
    end
end)

Upgrades:CreateToggle("x1 Hat Equip", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Basic = true 
        while wait(0) and _G.Basic do
            
local args = {
    [1] = {
        ["Upgrade"] = "HatSlot",
        ["RequestType"] = "UpgradeMax",
    },
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))
        end
    else
        _G.Basic = false
    end
end)

Upgrades:CreateToggle("FREE auto Clicker", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Basic = true 
        while wait(0) and _G.Basic do
           
local args = {
    [1] = {
        ["Upgrade"] = "FreeAutoClicker",
        ["RequestType"] = "UpgradeMax",
    },
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))
        end
    else
        _G.Basic = false
    end
end)

Upgrades:CreateToggle("Gem Increase", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Basic = true 
        while wait(0) and _G.Basic do
           local args = {
    [1] = {
        ["Upgrade"] = "GemIncrease",
        ["RequestType"] = "UpgradeMax",
    },
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))
        end
    else
        _G.Basic = false
    end
end)

Upgrades:CreateToggle("Rebirths Buttons", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Basic = true 
        while wait(0) and _G.Basic do
          local args = {
    [1] = {
        ["Upgrade"] = "RebirthOptions",
        ["RequestType"] = "UpgradeMax",
    },
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))
        end
    else
        _G.Basic = false
    end
end)

Upgrades:CreateToggle("Pet Slots", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Basic = true 
        while wait(0) and _G.Basic do
           local args = {
    [1] = {
        ["Upgrade"] = "PetSlot",
        ["RequestType"] = "UpgradeMax",
    },
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))
        end
    else
        _G.Basic = false
    end
end)

Upgrades:CreateToggle("Inventory", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Basic = true 
        while wait(0) and _G.Basic do
           local args = {
    [1] = {
        ["Upgrade"] = "Inventory",
        ["RequestType"] = "UpgradeMax",
    },
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))
        end
    else
        _G.Basic = false
    end
end)

Upgrades:CreateToggle("Oppen Speed", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Basic = true 
        while wait(0) and _G.Basic do
         local args = {
    [1] = {
        ["Upgrade"] = "OpeningSpeed",
        ["RequestType"] = "UpgradeMax",
    },
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))
        end
    else
        _G.Basic = false
    end
end)

Upgrades:CreateToggle("Max Combo", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Basic = true 
        while wait(0) and _G.Basic do
            
local args = {
    [1] = {
        ["Upgrade"] = "MaxCombo",
        ["RequestType"] = "UpgradeMax",
    },
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))
        end
    else
        _G.Basic = false
    end
end)

Upgrades:CreateToggle("Rocket Jump", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Basic = true 
        while wait(0) and _G.Basic do
            local args = {
    [1] = {
        ["Upgrade"] = "RocketJump",
        ["RequestType"] = "UpgradeMax",
    },
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))
        end
    else
        _G.Basic = false
    end
end)

Upgrades:CreateToggle("Pet Tier", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Basic = true 
        while wait(0) and _G.Basic do
local args = {
    [1] = {
        ["Upgrade"] = "PetTier",
        ["RequestType"] = "UpgradeMax"
    }
}

game:GetService("ReplicatedStorage").Functions.UpgradeFunction:InvokeServer(unpack(args))

        end
    else
        _G.Basic = false
    end
end)

AutoTab:CreateToggle("Speed Hack 100", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Basic = true 
        while wait(0) and _G.Basic do
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 100
        end
    else
        _G.Basic = false
    end
end)

AutoTab:CreateToggle("Auto Click", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Basic = true 
        while wait(0) and _G.Basic do
            game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")

game:GetService("ReplicatedStorage").Functions.Click:InvokeServer("Click")
        end
    else
        _G.Basic = false
    end
end)

eggs:CreateToggle("Auto Evolve Pets", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Basic = true 
        while wait(0) and _G.Basic do
            local A_1 = 
{
	["UpdateType"] = "UpgradeAllPets"
}
local Event = game:GetService("ReplicatedStorage").Events.InventoryEvent
Event:FireServer(A_1)

        end
    else
        _G.Basic = false
    end
end)

rebirths2:CreateToggle("Rebirth X100Q", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 100000000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths2:CreateToggle("Rebirth X10Q", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 10000000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths2:CreateToggle("Rebirth X1Q", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 1000000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths2:CreateToggle("Rebirth X100T", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 100000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths2:CreateToggle("Rebirth X25T", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 25000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths2:CreateToggle("Rebirth X10T", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 10000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths2:CreateToggle("Rebirth X5T", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 5000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths2:CreateToggle("Rebirth X2,5T", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 2500000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)


rebirths2:CreateToggle("Rebirth X1T", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 1000000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths2:CreateToggle("Rebirth X500B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 500000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths2:CreateToggle("Rebirth X250B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 250000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths2:CreateToggle("Rebirth X100B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 100000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths2:CreateToggle("Rebirth X50B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 50000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths2:CreateToggle("Rebirth X25B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 25000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths2:CreateToggle("Rebirth X10B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 10000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths2:CreateToggle("Rebirth X2,5B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 2500000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths:CreateToggle("Rebirth X1B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 1000000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths:CreateToggle("Rebirth X500M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 500000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths:CreateToggle("Rebirth X100M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 100000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths:CreateToggle("Rebirth X50M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 50000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths:CreateToggle("Rebirth X15M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 15000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths:CreateToggle("Rebirth X10M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 10000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths:CreateToggle("Rebirth X5M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 5000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths:CreateToggle("Rebirth X2M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 2000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths:CreateToggle("Rebirth X1M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 1000000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths:CreateToggle("Rebirth X500K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 500000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths:CreateToggle("Rebirth X250K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 250000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths:CreateToggle("Rebirth X100K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 100000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths:CreateToggle("Rebirth X50K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 50000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths:CreateToggle("Rebirth X25K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 25000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths:CreateToggle("Rebirth X10K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 10000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths:CreateToggle("Rebirth X2,5K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 2500,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths:CreateToggle("Rebirth X1K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 1000,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths:CreateToggle("Rebirth X500", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 500,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths:CreateToggle("Rebirth X100", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 100,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths:CreateToggle("Rebirth X50", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 50,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths:CreateToggle("Rebirth X10", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 10,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

rebirths:CreateToggle("Rebirth X1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Magic = true 
        while wait(0) and _G.Magic do
            local args = {
                [1] = {
                    ["Option"] = 1,
                    ["RequestType"] = "RequestRebirth",
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.RebirthFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Magic = false
    end
end)

eggs2:CreateToggle("Auto Buy Arcade Egg (11)3", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg11",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 40,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs2:CreateToggle("Auto Buy Arcade Egg (11)2", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg11",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs2:CreateToggle("Auto Buy Arcade Egg (11)1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg11",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs2:CreateToggle("Auto Buy Arcade Egg (11)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg11",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs2:CreateToggle("Auto Buy Dragons Egg (10)3", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg10",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 40,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs2:CreateToggle("Auto Buy Dragons Egg (10)2", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg10",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs2:CreateToggle("Auto Buy Dragons Egg (10)1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg10",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs2:CreateToggle("Auto Buy Dragons Egg (10)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg10",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs2:CreateToggle("Auto Buy villian Egg (9)3", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg9",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 40,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs2:CreateToggle("Auto Buy villian Egg (9)2", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg9",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs2:CreateToggle("Auto Buy villian Egg (9)1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg9",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs2:CreateToggle("Auto Buy villian Egg (9)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg9",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs2:CreateToggle("Auto Buy Alien Egg (8)3", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg8",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs2:CreateToggle("Auto Buy Alien Egg (8)2", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg8",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs2:CreateToggle("Auto Buy Alien Egg (8)1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg8",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs2:CreateToggle("Auto Buy Alien Egg (8)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg8",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs:CreateToggle("Auto Buy Ocean Egg (7)3", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg7",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,

              
              },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs:CreateToggle("Auto Buy Ocean Egg (7)2", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg7",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,

              
              },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs:CreateToggle("Auto Buy Ocean Egg (7)1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg7",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,

              
              },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs:CreateToggle("Auto Buy Ocean Egg (7)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg7",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,

              
              },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs:CreateToggle("Auto Buy 2M Egg", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg2M",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs:CreateToggle("Auto Buy 1M Egg", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg1M",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs:CreateToggle("Auto Buy 500K Egg", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg500k",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs:CreateToggle("Auto Buy 250K Egg", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg250k",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs:CreateToggle("Auto Buy 100K Egg", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg100k",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs:CreateToggle("Auto Buy Ancient Egg (6)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg6",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs:CreateToggle("Auto Buy Carnival Egg (5)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg5",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs:CreateToggle("Auto Buy Emojis Egg (4)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg4",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs:CreateToggle("Auto Buy Tropical Egg (3)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg3",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs:CreateToggle("Auto Buy Spotted Egg (2)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg2",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

eggs:CreateToggle("Auto Buy Basic Egg (1)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Water = true 
        while wait(0) and _G.Water do
            local args = {
                [1] = {
                    ["EggType"] = "Egg1",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.EggFunction:InvokeServer(unpack(args))            
        end
    else
        _G.Water = false
    end
end)

crates:CreateToggle("Auto Buy Carnival Crate (3)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.food = true 
        while wait(0) and _G.food do
            local args = {
                [1] = {
                    ["CrateType"] = "Crate3",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.CrateFunction:InvokeServer(unpack(args))            
        end
    else
        _G.food = false
    end
end)

crates:CreateToggle("Auto Buy Blossom Crate (2)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.food = true 
        while wait(0) and _G.food do
            local args = {
                [1] = {
                    ["CrateType"] = "Crate2",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.CrateFunction:InvokeServer(unpack(args))            
        end
    else
        _G.food = false
    end
end)

crates:CreateToggle("Auto Buy Grasy Crate (1)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.food = true 
        while wait(0) and _G.food do
            local args = {
                [1] = {
                    ["CrateType"] = "Crate1",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.CrateFunction:InvokeServer(unpack(args))            
        end
    else
        _G.food = false
    end
end)

crates:CreateToggle("Auto Buy Hero Crate (4)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.food = true 
        while wait(0) and _G.food do
            local args = {
                [1] = {
                    ["CrateType"] = "Crate4",
                    ["UpdateType"] = "Open",
                    ["Amount"] = 10,
                },
            }
            
            game:GetService("ReplicatedStorage").Functions.CrateFunction:InvokeServer(unpack(args))            
        end
    else
        _G.food = false
    end
end)

potions:CreateButton("Attention Dysplay issues", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:nothing()
end)

potions:CreateToggle("Potion x2 CLICKS", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.as = true 
        while wait(0) and _G.as do
            local args = {
            [1] = "Purchase",
            [2] = {
        ["Type"] = "ClickBooster2",
    },
}
game:GetService("ReplicatedStorage").Functions.Potions:InvokeServer(unpack(args))
end
    else
        _G.as = false
    end
end)

potions:CreateToggle("Potion x25 CLICKS", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.as = true 
        while wait(0) and _G.as do
            local args = {
            [1] = "Purchase",
            [2] = {
        ["Type"] = "ClickBooster25",
    },
}
game:GetService("ReplicatedStorage").Functions.Potions:InvokeServer(unpack(args))
end
    else
        _G.as = false
    end
end)

potions:CreateToggle("Potion x10 CLICKS", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.as = true 
        while wait(0) and _G.as do
            local args = {
            [1] = "Purchase",
            [2] = {
        ["Type"] = "ClickBooster10",
    },
}
game:GetService("ReplicatedStorage").Functions.Potions:InvokeServer(unpack(args))
end
    else
        _G.as = false
    end
end)

potions:CreateToggle("Potion x5 CLICKS", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.as = true 
        while wait(0) and _G.as do
            local args = {
            [1] = "Purchase",
            [2] = {
        ["Type"] = "ClickBooster5",
    },
}
game:GetService("ReplicatedStorage").Functions.Potions:InvokeServer(unpack(args))
end
    else
        _G.as = false
    end
end)

potions:CreateToggle("Potion x5 Gems", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.as = true 
        while wait(0) and _G.as do
            local args = {
            [1] = "Purchase",
            [2] = {
        ["Type"] = "GemBooster5",
    },
}
game:GetService("ReplicatedStorage").Functions.Potions:InvokeServer(unpack(args))
end
    else
        _G.as = false
    end
end)

potions:CreateToggle("Potion x2 Gems", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.as = true 
        while wait(0) and _G.as do
            local args = {
            [1] = "Purchase",
            [2] = {
        ["Type"] = "GemBooster2",
    },
}
game:GetService("ReplicatedStorage").Functions.Potions:InvokeServer(unpack(args))
end
    else
        _G.as = false
    end
end)

potions:CreateToggle("Potion x2 Luck", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.as = true 
        while wait(0) and _G.as do
  local args = {
    [1] = "Purchase",
    [2] = {
        ["Amount"] = 1,
        ["Type"] = "LuckBooster2",
    },
}

game:GetService("ReplicatedStorage").Functions.Potions:InvokeServer(unpack(args))
end
    else
        _G.as = false
    end
end)

teleports:CreateDropDown("Islands", {"Spawn", "Islands 1", "Islands 2", "Islands 3", "Islands 4", "Islands 5", "Islands 6", "Islands 7" , "Islands 8" , "Islands 9", "Islands 10", "Islands 11"}, function(arg) --the (arg) is the option you choose 
    if arg == "Spawn" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(53.6871033, 64.9600143, -916.602051)
    elseif arg == "Islands 1" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(121.647934, 457.010315, -821.140198)
    elseif arg == "Islands 2" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(15.2872801, 904.083008, -917.881653)
    elseif arg == "Islands 3" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(80.4999313, 1717.63647, -1058.14905)
    elseif arg == "Islands 4" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(239.828644, 2434.19946, -940.05658)
    elseif arg == "Islands 5" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(280.046295, 3603.84424, -858.549377)  
    elseif arg == "Islands 6" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(401.155701, 4312.67871, -765.344055) 
    elseif arg == "Islands 7" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(581.19635, 5097.88477, -692.195923) 
    elseif arg == "Islands 8" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(502.571442, 5894.22168, -702.051147) 
    elseif arg == "Islands 9" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(652.303833, 6874.55908, -886.94928) 
    elseif arg == "Islands 10" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(639.837158, 7832.3584, -972.805908)
    elseif arg == "Islands 11" then
        game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(505.438507, 8859.80859, -916.89563)
    end
end)

teleports:CreateButton("Shop 1", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(13.023798, 65.5558624, -891.703064)
end)

teleports:CreateButton("Shop 2", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(5.66315413, 65.0842514, -993.249878)
end)

teleports:CreateButton("Spin Wheel", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(54.8322182, 64.9600067, -970.927917)
end)

teleports:CreateButton("LeaderBoards", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-18.0845356, 65.6652069, -941.966614)
end)
AutoTab:CreateButton("Destroy Gui :D", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:Destroy()
end)

--| Anti AFK | By Altix#3395
    local Virtual = game:service'VirtualUser'
    game:service'Players'.LocalPlayer.Idled:connect(function()
        Virtual:CaptureController()
        Virtual:ClickButton2(Vector2.new())
        wait(2)
    end)



